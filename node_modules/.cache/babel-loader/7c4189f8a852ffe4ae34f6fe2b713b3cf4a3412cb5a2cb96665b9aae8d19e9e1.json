{"ast":null,"code":"var _jsxFileName = \"/Users/caitlinabramson/Repositories/toy-robot-simulator/src/components/Cell/Cell.tsx\",\n  _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport { Grid, Paper } from \"@mui/material\";\nimport { RobotContext } from \"../../globalStates/RobotContext.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = ({\n  row,\n  column,\n  getDirection\n}) => {\n  _s();\n  const context = useContext(RobotContext);\n  const location = context === null || context === void 0 ? void 0 : context.robotLocation;\n  const setLocation = context === null || context === void 0 ? void 0 : context.setRobotLocation;\n  const isRobotHere = (location === null || location === void 0 ? void 0 : location.row) === row && (location === null || location === void 0 ? void 0 : location.column) === column;\n  const onClick = () => {\n    if (!setLocation) {\n      throw new Error(\"useRobotContext must be used within a RobotProvider\");\n    }\n    setLocation({\n      row: row,\n      column: column\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12 / 5,\n    style: {\n      display: \"flex\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        height: \"70px\",\n        flexGrow: 1,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      onClick: () => onClick(),\n      children: isRobotHere && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: \"30px\",\n          width: \"fit-content\",\n          transform: getDirection\n        },\n        children: \"\\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, `${row}, ${column}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(Cell, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useContext","Grid","Paper","RobotContext","jsxDEV","_jsxDEV","Cell","row","column","getDirection","_s","context","location","robotLocation","setLocation","setRobotLocation","isRobotHere","onClick","Error","item","xs","style","display","children","height","flexGrow","alignItems","justifyContent","fontSize","width","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/caitlinabramson/Repositories/toy-robot-simulator/src/components/Cell/Cell.tsx"],"sourcesContent":["import { useContext } from \"react\";\nimport { Grid, Paper } from \"@mui/material\";\nimport { CellProps } from \"../../types/CellProps\";\nimport { RobotContext } from \"../../globalStates/RobotContext.ts\";\n\nconst Cell = ({ row, column, getDirection }: CellProps) => {\n  const context = useContext(RobotContext);\n  const location = context?.robotLocation;\n  const setLocation = context?.setRobotLocation;\n  const isRobotHere = location?.row === row && location?.column === column;\n\n  const onClick = () => {\n    if (!setLocation) {\n      throw new Error(\"useRobotContext must be used within a RobotProvider\");\n    }\n    setLocation({\n      row: row,\n      column: column,\n    });\n  };\n\n  return (\n    <Grid\n      item\n      xs={12 / 5}\n      key={`${row}, ${column}`}\n      style={{ display: \"flex\" }}\n    >\n      <Paper\n        style={{\n          height: \"70px\",\n          flexGrow: 1,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n        onClick={() => onClick()}\n      >\n        {isRobotHere && (\n          <p\n            style={{\n              fontSize: \"30px\",\n              width: \"fit-content\",\n              transform: getDirection,\n            }}\n          >\n            ðŸ¤–\n          </p>\n        )}\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default Cell;\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,IAAI,EAAEC,KAAK,QAAQ,eAAe;AAE3C,SAASC,YAAY,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,IAAI,GAAGA,CAAC;EAAEC,GAAG;EAAEC,MAAM;EAAEC;AAAwB,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAMC,OAAO,GAAGX,UAAU,CAACG,YAAY,CAAC;EACxC,MAAMS,QAAQ,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,aAAa;EACvC,MAAMC,WAAW,GAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,gBAAgB;EAC7C,MAAMC,WAAW,GAAG,CAAAJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEL,GAAG,MAAKA,GAAG,IAAI,CAAAK,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEJ,MAAM,MAAKA,MAAM;EAExE,MAAMS,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAI,CAACH,WAAW,EAAE;MAChB,MAAM,IAAII,KAAK,CAAC,qDAAqD,CAAC;IACxE;IACAJ,WAAW,CAAC;MACVP,GAAG,EAAEA,GAAG;MACRC,MAAM,EAAEA;IACV,CAAC,CAAC;EACJ,CAAC;EAED,oBACEH,OAAA,CAACJ,IAAI;IACHkB,IAAI;IACJC,EAAE,EAAE,EAAE,GAAG,CAAE;IAEXC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,eAE3BlB,OAAA,CAACH,KAAK;MACJmB,KAAK,EAAE;QACLG,MAAM,EAAE,MAAM;QACdC,QAAQ,EAAE,CAAC;QACXH,OAAO,EAAE,MAAM;QACfI,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE;MAClB,CAAE;MACFV,OAAO,EAAEA,CAAA,KAAMA,OAAO,CAAC,CAAE;MAAAM,QAAA,EAExBP,WAAW,iBACVX,OAAA;QACEgB,KAAK,EAAE;UACLO,QAAQ,EAAE,MAAM;UAChBC,KAAK,EAAE,aAAa;UACpBC,SAAS,EAAErB;QACb,CAAE;QAAAc,QAAA,EACH;MAED;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACJ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC,GAxBH,GAAG3B,GAAG,KAAKC,MAAM,EAAE;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAyBpB,CAAC;AAEX,CAAC;AAACxB,EAAA,CA/CIJ,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAiDV,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}