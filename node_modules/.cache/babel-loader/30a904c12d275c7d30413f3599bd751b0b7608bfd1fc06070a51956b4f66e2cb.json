{"ast":null,"code":"var _jsxFileName = \"/Users/caitlinabramson/Repositories/toy-robot-simulator/src/components/MatrixContainer/MatrixContainer.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Grid, Paper } from \"@mui/material\";\nimport \"./MatrixContainer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Direction = /*#__PURE__*/function (Direction) {\n  Direction[\"NORTH\"] = \"NORTH\";\n  Direction[\"SOUTH\"] = \"SOUTH\";\n  Direction[\"EAST\"] = \"EAST\";\n  Direction[\"WEST\"] = \"WEST\";\n  return Direction;\n}(Direction || {});\nconst MatrixContainer = () => {\n  _s();\n  const initRobot = {\n    row: null,\n    column: null\n    // setting the initial direction to be north\n    // direction: Direction.NORTH,\n  };\n  const [robotLocation, setRobotLocation] = useState(initRobot);\n  const [robotDirection, setRobotDirection] = useState(Direction.NORTH);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", event => handleKeyDown(event, robotDirection));\n  }, [robotDirection]);\n  const handleCellClick = (x, y) => {\n    setRobotLocation({\n      row: x,\n      column: y\n    });\n  };\n  const handleKeyDown = (event, robotDirection) => {\n    console.log(\"key down\");\n    switch (robotDirection) {\n      case \"NORTH\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.WEST);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.EAST);\n        }\n        break;\n      case \"SOUTH\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.EAST);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.WEST);\n        }\n        break;\n      case \"EAST\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.NORTH);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.SOUTH);\n        }\n        break;\n      case \"WEST\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.SOUTH);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.NORTH);\n        }\n        break;\n    }\n    switch (event.key) {\n      case \"n\":\n        setRobotDirection(Direction.NORTH);\n        break;\n      case \"s\":\n        setRobotDirection(Direction.SOUTH);\n        break;\n      case \"e\":\n        setRobotDirection(Direction.EAST);\n        break;\n      case \"w\":\n        setRobotDirection(Direction.WEST);\n        break;\n    }\n  };\n  const renderCell = (row, column) => {\n    const isRobotHere = robotLocation.row === row && robotLocation.column === column;\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12 / 5,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        onClick: () => handleCellClick(row, column),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"30px\"\n          },\n          children: isRobotHere ? \"üèéÔ∏è\" : `${row},${column},${robotDirection}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, `${row}, ${column}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  };\n  const grid = [];\n  for (let row = 4; row >= 0; row--) {\n    const cols = [];\n    for (let col = 0; col < 5; col++) {\n      cols.push(renderCell(col, row));\n    }\n    grid.push( /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      children: cols\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"matrix--container\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixContainer, \"/QA+TovByMML0bvpOI/sMJJBG+c=\");\n_c = MatrixContainer;\nexport default MatrixContainer;\nvar _c;\n$RefreshReg$(_c, \"MatrixContainer\");","map":{"version":3,"names":["useEffect","useState","Grid","Paper","jsxDEV","_jsxDEV","Direction","MatrixContainer","_s","initRobot","row","column","robotLocation","setRobotLocation","robotDirection","setRobotDirection","NORTH","document","addEventListener","event","handleKeyDown","handleCellClick","x","y","console","log","key","WEST","EAST","SOUTH","renderCell","isRobotHere","item","xs","children","onClick","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","grid","cols","col","push","container","className","spacing","_c","$RefreshReg$"],"sources":["/Users/caitlinabramson/Repositories/toy-robot-simulator/src/components/MatrixContainer/MatrixContainer.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Grid, Paper } from \"@mui/material\";\nimport \"./MatrixContainer.css\";\n\nenum Direction {\n  NORTH = \"NORTH\",\n  SOUTH = \"SOUTH\",\n  EAST = \"EAST\",\n  WEST = \"WEST\",\n}\n\ninterface Robot {\n  row: number | null;\n  column: number | null;\n  // direction: Direction;\n}\n\nconst MatrixContainer = () => {\n  const initRobot: Robot = {\n    row: null,\n    column: null,\n    // setting the initial direction to be north\n    // direction: Direction.NORTH,\n  };\n  const [robotLocation, setRobotLocation] = useState(initRobot);\n  const [robotDirection, setRobotDirection] = useState(Direction.NORTH);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", (event) =>\n      handleKeyDown(event, robotDirection)\n    );\n  }, [robotDirection]);\n\n  const handleCellClick = (x: number, y: number) => {\n    setRobotLocation({\n      row: x,\n      column: y,\n    });\n  };\n\n  const handleKeyDown = (event: KeyboardEvent, robotDirection: Direction) => {\n    console.log(\"key down\");\n    switch (robotDirection) {\n      case \"NORTH\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.WEST);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.EAST);\n        }\n        break;\n      case \"SOUTH\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.EAST);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.WEST);\n        }\n        break;\n      case \"EAST\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.NORTH);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.SOUTH);\n        }\n        break;\n      case \"WEST\":\n        if (event.key === \"ArrowLeft\") {\n          setRobotDirection(Direction.SOUTH);\n        }\n        if (event.key === \"ArrowRight\") {\n          setRobotDirection(Direction.NORTH);\n        }\n        break;\n    }\n    switch (event.key) {\n      case \"n\":\n        setRobotDirection(Direction.NORTH);\n        break;\n      case \"s\":\n        setRobotDirection(Direction.SOUTH);\n        break;\n      case \"e\":\n        setRobotDirection(Direction.EAST);\n        break;\n      case \"w\":\n        setRobotDirection(Direction.WEST);\n        break;\n    }\n  };\n\n  const renderCell = (row: number, column: number) => {\n    const isRobotHere =\n      robotLocation.row === row && robotLocation.column === column;\n    return (\n      <Grid item xs={12 / 5} key={`${row}, ${column}`}>\n        <Paper onClick={() => handleCellClick(row, column)}>\n          <p style={{ fontSize: \"30px\" }}>\n            {isRobotHere ? \"üèéÔ∏è\" : `${row},${column},${robotDirection}`}\n          </p>\n        </Paper>\n      </Grid>\n    );\n  };\n\n  const grid = [];\n  for (let row = 4; row >= 0; row--) {\n    const cols = [];\n    for (let col = 0; col < 5; col++) {\n      cols.push(renderCell(col, row));\n    }\n    grid.push(\n      <Grid container item xs={12} key={row}>\n        {cols}\n      </Grid>\n    );\n  }\n\n  return (\n    <div className=\"matrix--container\">\n      <Grid container spacing={1}>\n        {grid}\n      </Grid>\n    </div>\n  );\n};\n\nexport default MatrixContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}