{"ast":null,"code":"var _jsxFileName = \"/Users/caitlinabramson/Repositories/toy-robot-simulator/src/components/MatrixContainer/MatrixContainer.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport \"./MatrixContainer.css\";\nimport Cell from \"../Cell/Cell.tsx\";\nimport { RobotContext } from \"../../globalStates/RobotContext.ts\";\nimport { DirectionProps } from \"../../types/DirectionProps.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixContainer = () => {\n  _s();\n  const initRobot = {\n    row: null,\n    column: null\n  };\n  const [robotLocation, setRobotLocation] = useState(initRobot);\n  const [robotDirection, setRobotDirection] = useState(DirectionProps.NORTH);\n  //     robotLocation.row === row && robotLocation.column === column;\n  //   return (\n  //     <Grid\n  //       item\n  //       xs={12 / 5}\n  //       key={`${row}, ${column}`}\n  //       style={{ display: \"flex\" }}\n  //     >\n  //       <Paper\n  //         style={{\n  //           height: \"70px\",\n  //           flexGrow: 1,\n  //           display: \"flex\",\n  //           alignItems: \"center\",\n  //           justifyContent: \"center\",\n  //         }}\n  //         onClick={() => handleCellClick(row, column)}\n  //       >\n  //         {isRobotHere && (\n  //           <p\n  //             style={{\n  //               fontSize: \"30px\",\n  //               width: \"fit-content\",\n  //               transform: getDirection(robotDirection),\n  //             }}\n  //           >\n  //             ðŸ¤–\n  //           </p>\n  //         )}\n  //       </Paper>\n  //     </Grid>\n  //   );\n  // };\n\n  const grid = [];\n  for (let row = 4; row >= 0; row--) {\n    const columns = [];\n    for (let column = 0; column < 5; column++) {\n      columns.push( /*#__PURE__*/_jsxDEV(Cell, {\n        row: row,\n        column: column\n      }, column, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }, this));\n    }\n    grid.push( /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      children: columns\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(RobotContext.Provider, {\n    value: {\n      robotLocation,\n      setRobotLocation,\n      robotDirection,\n      setRobotDirection\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matrix--container\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        children: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixContainer, \"1eNTFS8mbP1Dm1A3nopkLXFgLR4=\");\n_c = MatrixContainer;\nexport default MatrixContainer;\nvar _c;\n$RefreshReg$(_c, \"MatrixContainer\");","map":{"version":3,"names":["useState","Grid","Cell","RobotContext","DirectionProps","jsxDEV","_jsxDEV","MatrixContainer","_s","initRobot","row","column","robotLocation","setRobotLocation","robotDirection","setRobotDirection","NORTH","grid","columns","push","fileName","_jsxFileName","lineNumber","columnNumber","container","item","xs","children","Provider","value","className","spacing","_c","$RefreshReg$"],"sources":["/Users/caitlinabramson/Repositories/toy-robot-simulator/src/components/MatrixContainer/MatrixContainer.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { Grid, Paper } from \"@mui/material\";\nimport \"./MatrixContainer.css\";\nimport Cell from \"../Cell/Cell.tsx\";\nimport { RobotContext } from \"../../globalStates/RobotContext.ts\";\nimport { DirectionProps } from \"../../types/DirectionProps.ts\";\n\ninterface Location {\n  row: number | null;\n  column: number | null;\n}\n\nconst MatrixContainer = () => {\n  const initRobot: Location = {\n    row: null,\n    column: null,\n  };\n  const [robotLocation, setRobotLocation] = useState(initRobot);\n  const [robotDirection, setRobotDirection] = useState(DirectionProps.NORTH);\n  //     robotLocation.row === row && robotLocation.column === column;\n  //   return (\n  //     <Grid\n  //       item\n  //       xs={12 / 5}\n  //       key={`${row}, ${column}`}\n  //       style={{ display: \"flex\" }}\n  //     >\n  //       <Paper\n  //         style={{\n  //           height: \"70px\",\n  //           flexGrow: 1,\n  //           display: \"flex\",\n  //           alignItems: \"center\",\n  //           justifyContent: \"center\",\n  //         }}\n  //         onClick={() => handleCellClick(row, column)}\n  //       >\n  //         {isRobotHere && (\n  //           <p\n  //             style={{\n  //               fontSize: \"30px\",\n  //               width: \"fit-content\",\n  //               transform: getDirection(robotDirection),\n  //             }}\n  //           >\n  //             ðŸ¤–\n  //           </p>\n  //         )}\n  //       </Paper>\n  //     </Grid>\n  //   );\n  // };\n\n  const grid = [];\n  for (let row = 4; row >= 0; row--) {\n    const columns = [];\n    for (let column = 0; column < 5; column++) {\n      columns.push(<Cell key={column} row={row} column={column} />);\n    }\n    grid.push(\n      <Grid container item xs={12} key={row}>\n        {columns}\n      </Grid>\n    );\n  }\n\n  return (\n    <RobotContext.Provider\n      value={{\n        robotLocation,\n        setRobotLocation,\n        robotDirection,\n        setRobotDirection,\n      }}\n    >\n      <div className=\"matrix--container\">\n        <Grid container spacing={1}>\n          {grid}\n        </Grid>\n      </div>\n    </RobotContext.Provider>\n  );\n};\n\nexport default MatrixContainer;\n"],"mappings":";;AAAA,SAAiCA,QAAQ,QAAQ,OAAO;AACxD,SAASC,IAAI,QAAe,eAAe;AAC3C,OAAO,uBAAuB;AAC9B,OAAOC,IAAI,MAAM,kBAAkB;AACnC,SAASC,YAAY,QAAQ,oCAAoC;AACjE,SAASC,cAAc,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO/D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,SAAmB,GAAG;IAC1BC,GAAG,EAAE,IAAI;IACTC,MAAM,EAAE;EACV,CAAC;EACD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAACS,SAAS,CAAC;EAC7D,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAACI,cAAc,CAACY,KAAK,CAAC;EAC1E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIP,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;IACjC,MAAMQ,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIP,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,EAAEA,MAAM,EAAE,EAAE;MACzCO,OAAO,CAACC,IAAI,eAACb,OAAA,CAACJ,IAAI;QAAcQ,GAAG,EAAEA,GAAI;QAACC,MAAM,EAAEA;MAAO,GAAjCA,MAAM;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6B,CAAC,CAAC;IAC/D;IACAN,IAAI,CAACE,IAAI,eACPb,OAAA,CAACL,IAAI;MAACuB,SAAS;MAACC,IAAI;MAACC,EAAE,EAAE,EAAG;MAAAC,QAAA,EACzBT;IAAO,GADwBR,GAAG;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE/B,CACR,CAAC;EACH;EAEA,oBACEjB,OAAA,CAACH,YAAY,CAACyB,QAAQ;IACpBC,KAAK,EAAE;MACLjB,aAAa;MACbC,gBAAgB;MAChBC,cAAc;MACdC;IACF,CAAE;IAAAY,QAAA,eAEFrB,OAAA;MAAKwB,SAAS,EAAC,mBAAmB;MAAAH,QAAA,eAChCrB,OAAA,CAACL,IAAI;QAACuB,SAAS;QAACO,OAAO,EAAE,CAAE;QAAAJ,QAAA,EACxBV;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE5B,CAAC;AAACf,EAAA,CAtEID,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AAwErB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}